(:= height length)
(:= (range start stop step) (if (>= start stop) (list) (concat (list start) (range (+ start step) stop step))))
(:= (width board) (length (nth board 0)))
(:= (contains? list_ elt) (if (=? nil list_) @f (if (=? (head list_) elt) @t (contains? (tail list_) elt))))
(if (contains? (list) 2) 1 0)
(if (contains? (list 1 2 3) 2) 1 0)
(if (contains? (list 1 2 3) 7) 1 0)
(if (contains? (list 1 2 3) 6) 1 0)
(:= (slice list_ start stop) (map (function (i) (nth list_ i)) (range start stop 1)))
(slice (list 1 2 3) 0 1)
(slice (list 1 2 3) 0 2)
(:= (list-replace list_ replace-ix elt) (map (function (i) (if (=? i replace-ix) elt (nth list_ i))) (range 0 (length list_) 1)))
(list-replace (list 1 2 3) 1 8)
(list-replace (list 1 2 3) 2 7)
(list-replace (list 1 2 3) 42 7)
(:= (empty? list_) (=? (length list_) 0))
(if (empty? (list)) 1 0)
(if (empty? (list 1)) 1 0)
(if (empty? (list 1 2 3)) 1 0)
(:= (zip l1 l2) (if (empty? l1) (list) (concat (list (pair (head l1) (head l2))) (zip (tail l1) (tail l2)))))
(:= (subgrid-index x) (if (contains? (list 0 1 2) x) 0 (if (contains? (list 3 4 5) x) 1 (if (contains? (list 6 7 8) x) 2 -1))))
(:= (set-difference l1 l2) (filter (function (x) (not (contains? l2 x))) l1))
(set-difference (list 1 2 3) (list 3 6 7))
(set-difference (list 1 2 3) (list 2 1 7))
(set-difference (list 1 2 3) (list 7 8 9))
(:= all-moves (range 1 10 1))
(:= (valid-moves board r c) (set-difference all-moves (concat (values-in-row board r) (values-in-column board c) (values-in-subgrid board (subgrid-index r) (subgrid-index c)))))
(:= (get-value board r c) (nth (nth board r) c))
(:= (!= x y) (not (=? x y)))
(:= (nonzero? x) (!= x 0))
(:= (nonzero-vals list_) (filter nonzero? list_))
(:= (values-in-row board r) (nonzero-vals (nth board r)))
(:= (values-in-column board c) (nonzero-vals (map (function (row) (nth row c)) board)))
(:= (values-in-subgrid board sr sc) (let ((start-r (* sr 3)) (start-c (* sc 3))) (nonzero-vals (concat (slice (nth board start-r) start-c (+ start-c 3)) (slice (nth board (+ start-r 1)) start-c (+ start-c 3)) (slice (nth board (+ start-r 2)) start-c (+ start-c 3))))))
(:= (board-replace board r c elt) (map (function (r-ix) (let ((test-row (nth board r-ix))) (if (=? r-ix r) (list-replace test-row c elt) test-row))) (range 0 (height board) 1)))
(:= (all-pairs l1 l2) (let ((single-term (function (e1) (map (function (e2) (pair e1 e2)) l2)))) (reduce concat (map single-term l1) (list))))
(:= (get-value-pair board c) (get-value board (head c) (tail c)))
(:= (find-first-zero board) (begin (:= (helper vals-to-try) (if (empty? vals-to-try) (pair -1 -1) (if (=? 0 (get-value-pair board (head vals-to-try))) (head vals-to-try) (helper (tail vals-to-try))))) (helper (all-pairs (range 0 9 1) (range 0 9 1)))))
(:= (solve-helper board r c vals) (if (empty? vals) -1 (let ((rec-result (solve-sudoku (board-replace board r c (head vals))))) (if (=? rec-result -1) (solve-helper board r c (tail vals)) rec-result))))
(:= (solve-sudoku board) (let ((zero-ix (find-first-zero board))) (if (=? (head zero-ix) -1) board (solve-helper board (head zero-ix) (tail zero-ix) (valid-moves board (head zero-ix) (tail zero-ix))))))
(:= board1 (list (list 5 1 7 6 0 0 0 3 4) (list 2 8 9 0 0 4 0 0 0) (list 3 4 6 2 0 5 0 9 0) (list 6 0 2 0 0 0 0 1 0) (list 0 3 8 0 0 6 0 4 7) (list 0 0 0 0 0 0 0 0 0) (list 0 9 0 0 0 0 0 7 8) (list 7 0 3 4 0 0 5 6 0) (list 0 0 0 0 0 0 0 0 0)))
(:= board4 (list (list 5 1 7 6 8 0 0 3 4) (list 2 8 9 0 0 4 0 0 0) (list 3 4 6 2 0 5 0 9 0) (list 6 0 2 0 0 0 0 1 0) (list 0 3 8 0 0 6 0 4 7) (list 0 0 0 0 0 0 0 0 0) (list 0 9 0 0 0 0 0 7 8) (list 7 0 3 4 0 0 5 6 0) (list 0 0 0 0 0 0 0 0 0)))
(:= board5 (list (list 5 1 7 6 8 1 1 3 4) (list 2 8 9 1 1 4 1 1 1) (list 3 4 6 2 1 5 1 9 1) (list 6 1 2 1 1 1 1 1 1) (list 1 3 8 1 1 6 1 4 7) (list 1 1 1 1 1 1 1 1 1) (list 1 9 1 1 1 1 1 7 8) (list 7 1 3 4 1 1 5 6 1) (list 1 1 1 1 1 1 1 1 1)))
(head (find-first-zero board1))
(tail (find-first-zero board1))
(head (find-first-zero board5))
(tail (find-first-zero board5))
(solve-sudoku board1)
(solve-sudoku board4)
